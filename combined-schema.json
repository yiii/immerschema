{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "immerschema/combined-schema.json",
  "title": "Combined Immerschema - All Schemas",
  "description": "Complete schema combining all slices, enums, profiles, and project schemas",
  "definitions": {
    "enum_assetkind": {
      "$schema": "http://json-schema.org/draft/2020-12/schema",
      "title": "Asset kind enum",
      "description": "Top-level media types accepted by the pipeline.",
      "type": "string",
      "enum": [
        "image",
        "video",
        "audio",
        "3d",
        "pdf",
        "other"
      ]
    },
    "enum_assetrole": {
      "$schema": "http://json-schema.org/draft/2020-12/schema",
      "title": "Asset role enum",
      "description": "Purpose of each asset inside the production workflow.",
      "type": "string",
      "enum": [
        "reference",
        "plate",
        "texture",
        "hdr",
        "preview",
        "storyboard",
        "animatic",
        "legal",
        "other"
      ]
    },
    "enum_dept": {
      "$schema": "http://json-schema.org/draft/2020-12/schema",
      "title": "Department enum (pipeline buckets)",
      "description": "High-level production departments; short tokens match techGroup style.",
      "type": "string",
      "enum": [
        "DIR",
        "PROD",
        "CG",
        "FX",
        "2D",
        "GEN",
        "AI",
        "CAM",
        "AUDIO",
        "EDIT",
        "COMP",
        "PIPE",
        "SUPPORT",
        "OTHER"
      ]
    },
    "enum_riskflag": {
      "$schema": "http://json-schema.org/draft/2020-12/schema",
      "title": "Risk flag enum (simplified)",
      "type": "string",
      "enum": [
        "render_overrun",
        "asset_block",
        "software_failure",
        "infrastructure_issue",
        "realtime_sync",
        "schedule_scope",
        "creative_alignment",
        "compliance_delay",
        "talent_gap",
        "data_breach"
      ]
    },
    "enum_role": {
      "$schema": "http://json-schema.org/draft/2020-12/schema",
      "title": "Role enum (focused)",
      "description": "Key crew roles for immersive CG projects; realtime and FX specialists kept explicit.",
      "type": "string",
      "enum": [
        "Director",
        "Producer",
        "ProjectManager",
        "ArtLead",
        "CGSupervisor",
        "HoudiniArtist",
        "MotionDesigner",
        "UnrealArtist",
        "TouchDesignerArtist",
        "TouchDesignerDeveloper",
        "NotchArtist",
        "AIArtist",
        "AudioLead",
        "Composer",
        "PostLead",
        "MontageArtist",
        "CameraOperator",
        "TechSupport",
        "other"
      ]
    },
    "enum_screenzone": {
      "$schema": "http://json-schema.org/draft/2020-12/schema",
      "title": "Screen zone enum",
      "description": "18 canonical zones for fulldome blocking.",
      "type": "string",
      "enum": [
        "full_dome",
        "zenith",
        "upper",
        "horizon",
        "lower",
        "nadir",
        "front",
        "rear",
        "left",
        "right",
        "upper_front_left",
        "upper_front_right",
        "upper_rear_left",
        "upper_rear_right",
        "lower_front_left",
        "lower_front_right",
        "lower_rear_left",
        "lower_rear_right"
      ],
      "enumOrder": [
        "full_dome",
        "zenith",
        "upper",
        "horizon",
        "lower",
        "nadir",
        "upper_front_left",
        "upper_front_right",
        "upper_rear_right",
        "upper_rear_left",
        "front",
        "right",
        "rear",
        "left",
        "lower_front_left",
        "lower_front_right",
        "lower_rear_right",
        "lower_rear_left"
      ]
    },
    "enum_software": {
      "$comment": "ENUM - software used in pipeline; update via governance workflow.",
      "title": "Software enum",
      "description": "Enumerates software tools used in production pipelines. Use 'other' for unlisted tools.",
      "type": "string",
      "enum": [
        "Houdini",
        "Blender",
        "Cinema4D",
        "Unreal",
        "Notch",
        "TouchDesigner",
        "AfterEffects",
        "Redshift",
        "Octane",
        "Midjourney",
        "RunwayGen2",
        "Veo",
        "ElevenLabs",
        "Ableton",
        "VCV",
        "git",
        "other"
      ]
    },
    "enum_technique": {
      "title": "Technique enum",
      "type": "string",
      "enum": [
        "3d_render",
        "3d_realtime",
        "capture_video",
        "capture_volumetric",
        "capture_photogrammetry",
        "capture_360",
        "capture_stock",
        "rig_animation",
        "mocap_performance",
        "2d_montage",
        "2d_multiscreen",
        "2d_video_collage",
        "2d_hand_drawn",
        "2d_shape_animation",
        "2d_info_graphics",
        "2d_typography",
        "gen_procedural",
        "gen_particle",
        "gen_data_viz",
        "gen_audio_reactive",
        "gen_generative_art",
        "sim_fluid",
        "sim_smoke_fire",
        "sim_cloth_softbody",
        "ai_generate",
        "ai_style_transfer",
        "ai_avatar",
        "ai_face_swap"
      ]
    },
    "ext_debug": {
      "$comment": "EXTENSION – debug / scratch fields",
      "title": "Debug block",
      "type": "object",
      "properties": {
        "debug": {
          "type": "object",
          "additionalProperties": true,
          "description": "Any temp or diagnostic keys go here."
        }
      }
    },
    "io_patch": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "title": "Single Scene Patch (RFC-6902 wrapper)",
      "type": "object",
      "required": [
        "id",
        "baseRev",
        "patch"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Target scene ID (matches `core.schema.json` /id)."
        },
        "baseRev": {
          "type": "integer",
          "minimum": 0,
          "description": "Optimistic-lock revision number the patch was generated from."
        },
        "patch": {
          "type": "array",
          "description": "Standard JSON-Patch operations list.",
          "items": {
            "type": "object",
            "required": [
              "op",
              "path"
            ],
            "additionalProperties": false,
            "properties": {
              "op": {
                "type": "string",
                "description": "RFC-6902 verb.",
                "enum": [
                  "add",
                  "remove",
                  "replace",
                  "move",
                  "copy",
                  "test"
                ]
              },
              "path": {
                "type": "string"
              },
              "from": {
                "type": "string"
              },
              "value": {}
            }
          }
        }
      },
      "additionalProperties": false
    },
    "io_prompt_envelope": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "title": "LLM Prompt Envelope (author ➜ model)",
      "$comment": "Always 2 or 3 items. All elements are *required* when present.",
      "type": "array",
      "minItems": 2,
      "maxItems": 3,
      "prefixItems": [
        {
          "type": "string",
          "title": "USER_MESSAGE",
          "description": "Human instruction or question sent to the model."
        },
        {
          "$ref": "#/definitions/core",
          "title": "CURRENT_ITEM",
          "description": "The scene (or sub-scene) JSON the user is editing."
        },
        {
          "type": "array",
          "title": "FULL_PIPELINE (optional)",
          "description": "If present, every scene in the project—used for global checks.",
          "items": {
            "$ref": "#/definitions/core"
          }
        }
      ],
      "items": false
    },
    "io_response_envelope": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "title": "LLM Response Envelope (model ➜ middleware)",
      "$comment": "First item is chain-of-thoughts (CoT). Strip before showing user if needed.",
      "type": "array",
      "minItems": 3,
      "maxItems": 3,
      "prefixItems": [
        {
          "type": "string",
          "title": "CHAIN_OF_THOUGHTS",
          "description": "Model's internal reasoning. Keep for logs; hide from user UI."
        },
        {
          "type": "string",
          "title": "LLM_ANSWER",
          "description": "Human-readable reply to display."
        },
        {
          "type": "array",
          "title": "ITEMS_UPDATE",
          "description": "List of RFC-6902 patches to apply (may be empty).",
          "items": {
            "$ref": "#/definitions/io_patch"
          }
        }
      ],
      "items": false
    },
    "profiles_assign": {
      "title": "Profile – Assign (crew & tasks)",
      "type": "object",
      "additionalProperties": true,
      "allOf": [
        {
          "$ref": "#/definitions/profiles_plan"
        },
        {
          "$ref": "#/definitions/slices_tasks_prop_slice"
        },
        {
          "$ref": "#/definitions/slices_crew_prop_slice"
        },
        {
          "$ref": "#/definitions/slices_audio_slice"
        }
      ],
      "required": [
        "tasks",
        "crew",
        "voice",
        "audio",
        "description"
      ]
    },
    "profiles_draft": {
      "title": "Profile – Draft",
      "type": "object",
      "additionalProperties": true,
      "allOf": [
        {
          "$ref": "#/definitions/slices_id_slice"
        },
        {
          "$ref": "#/definitions/slices_note_slice"
        },
        {
          "$ref": "#/definitions/slices_timing_seconds_slice"
        },
        {
          "$ref": "#/definitions/slices_timing_frames_slice"
        },
        {
          "$ref": "#/definitions/slices_technique_slice"
        },
        {
          "$ref": "#/definitions/slices_voice_slice"
        },
        {
          "$ref": "#/definitions/slices_audio_slice"
        },
        {
          "$ref": "#/definitions/slices_description_slice"
        },
        {
          "$ref": "#/definitions/slices_screen_slice"
        }
      ],
      "required": [
        "id"
      ],
      "anyOf": [
        {
          "required": [
            "action"
          ]
        },
        {
          "required": [
            "userNote"
          ]
        },
        {
          "required": [
            "llmNote"
          ]
        },
        {
          "required": [
            "timing"
          ]
        },
        {
          "required": [
            "technique"
          ]
        },
        {
          "required": [
            "voice"
          ]
        },
        {
          "required": [
            "audio"
          ]
        },
        {
          "required": [
            "description"
          ]
        },
        {
          "required": [
            "screen"
          ]
        }
      ]
    },
    "profiles_lock": {
      "title": "Profile – Lock (final safety gate)",
      "type": "object",
      "additionalProperties": true,
      "allOf": [
        {
          "$ref": "#/definitions/profiles_assign"
        },
        {
          "$ref": "#/definitions/slices_risks_prop_slice"
        }
      ],
      "required": [
        "voice",
        "risks",
        "description"
      ]
    },
    "profiles_plan": {
      "title": "Profile – Plan (tech lock)",
      "type": "object",
      "additionalProperties": true,
      "allOf": [
        {
          "$ref": "#/definitions/profiles_review"
        },
        {
          "$ref": "#/definitions/slices_software_slice"
        },
        {
          "$ref": "#/definitions/slices_bottleneck_slice"
        },
        {
          "$ref": "#/definitions/slices_workload_slice"
        },
        {
          "$ref": "#/definitions/slices_risks_prop_slice"
        }
      ],
      "required": [
        "softwarePipeline",
        "technique",
        "voice",
        "workloadBreakdown",
        "risks",
        "description"
      ]
    },
    "profiles_review": {
      "title": "Profile – Review (creative + timing)",
      "type": "object",
      "additionalProperties": true,
      "required": [
        "timing",
        "technique",
        "voice",
        "assets",
        "description"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/profiles_draft"
        },
        {
          "$ref": "#/definitions/slices_meta_scene_slice"
        },
        {
          "$ref": "#/definitions/slices_screen_slice"
        },
        {
          "$ref": "#/definitions/slices_additional_screens_slice"
        },
        {
          "$ref": "#/definitions/slices_assets_prop_slice"
        },
        {
          "anyOf": [
            {
              "properties": {
                "screen": {
                  "required": [
                    "screenZone"
                  ]
                }
              }
            },
            {
              "properties": {
                "screen": {
                  "required": [
                    "cameraMotion"
                  ]
                }
              }
            }
          ]
        }
      ]
    },
    "project_assign": {
      "title": "Fulldome Project – Assign",
      "type": "object",
      "required": [
        "projectId",
        "title",
        "shots"
      ],
      "additionalProperties": false,
      "properties": {
        "projectId": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "schemaVersion": {
          "type": "string",
          "default": "1.0.0"
        },
        "shots": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/profiles_assign"
          },
          "description": "Shot documents validated against the Assign profile."
        },
        "globalSoftware": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/enum_software"
          },
          "default": []
        },
        "globalMusic": {
          "type": "string"
        },
        "debug": {
          "$ref": "#/definitions/ext_debug_schema_json_properties_debug"
        }
      }
    },
    "project_draft": {
      "title": "Fulldome Project – Draft",
      "type": "object",
      "required": [
        "projectId",
        "title",
        "shots"
      ],
      "additionalProperties": false,
      "properties": {
        "projectId": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "schemaVersion": {
          "type": "string",
          "default": "1.0.0"
        },
        "shots": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/profiles_draft"
          },
          "description": "Shot documents validated against the Draft profile."
        },
        "globalSoftware": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/enum_software"
          },
          "default": []
        },
        "globalMusic": {
          "type": "string"
        },
        "debug": {
          "$ref": "#/definitions/ext_debug_schema_json_properties_debug"
        }
      }
    },
    "project_lock": {
      "title": "Fulldome Project – Lock",
      "type": "object",
      "required": [
        "projectId",
        "title",
        "shots"
      ],
      "additionalProperties": false,
      "properties": {
        "projectId": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "schemaVersion": {
          "type": "string",
          "default": "1.0.0"
        },
        "shots": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/profiles_lock"
          },
          "description": "Shot documents validated against the Lock profile."
        },
        "globalSoftware": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/enum_software"
          },
          "default": []
        },
        "globalMusic": {
          "type": "string"
        },
        "debug": {
          "$ref": "#/definitions/ext_debug_schema_json_properties_debug"
        }
      }
    },
    "project_plan": {
      "title": "Fulldome Project – Plan",
      "type": "object",
      "required": [
        "projectId",
        "title",
        "shots"
      ],
      "additionalProperties": false,
      "properties": {
        "projectId": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "schemaVersion": {
          "type": "string",
          "default": "1.0.0"
        },
        "shots": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/profiles_plan"
          },
          "description": "Shot documents validated against the Plan profile."
        },
        "globalSoftware": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/enum_software"
          },
          "default": []
        },
        "globalMusic": {
          "type": "string"
        },
        "debug": {
          "$ref": "#/definitions/ext_debug_schema_json_properties_debug"
        }
      }
    },
    "project_review": {
      "title": "Fulldome Project – Review",
      "type": "object",
      "required": [
        "projectId",
        "title",
        "shots"
      ],
      "additionalProperties": false,
      "properties": {
        "projectId": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "schemaVersion": {
          "type": "string",
          "default": "1.0.0"
        },
        "shots": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/profiles_review"
          },
          "description": "Shot documents validated against the Review profile."
        },
        "globalSoftware": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/enum_software"
          },
          "default": []
        },
        "globalMusic": {
          "type": "string"
        },
        "debug": {
          "$ref": "#/definitions/ext_debug_schema_json_properties_debug"
        }
      }
    },
    "slices_additional_screens_slice": {
      "title": "Additional screens slice",
      "type": "object",
      "properties": {
        "floorAction": {
          "type": "string",
          "description": "Action or instruction for the floor screen"
        },
        "rausAction": {
          "type": "string",
          "description": "Action or instruction for the raus screen"
        }
      },
      "additionalProperties": true
    },
    "slices_assets_slice": {
      "title": "Assets array slice",
      "type": "array",
      "items": {
        "type": "object",
        "required": [
          "path",
          "kind",
          "role"
        ],
        "additionalProperties": false,
        "properties": {
          "path": {
            "type": "string",
            "pattern": "^(https?://|/|\\./).+"
          },
          "kind": {
            "$ref": "#/definitions/enum_assetkind"
          },
          "role": {
            "$ref": "#/definitions/enum_assetrole"
          },
          "sourcePath": {
            "type": "string",
            "pattern": "^(https?://|/|\\./).+"
          },
          "visualDescription": {
            "type": "string"
          },
          "motionDescription": {
            "type": "string"
          },
          "audioDescription": {
            "type": "string"
          },
          "lang": {
            "type": "string",
            "pattern": "^[a-z]{2}$"
          },
          "note": {
            "type": "string"
          }
        },
        "allOf": [
          {
            "if": {
              "properties": {
                "role": {
                  "const": "preview"
                }
              }
            },
            "then": {
              "required": [
                "sourcePath"
              ]
            }
          }
        ]
      },
      "default": []
    },
    "slices_audio_slice": {
      "title": "Audio slice (nested)",
      "type": "object",
      "properties": {
        "audio": {
          "type": "object",
          "properties": {
            "music": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "path": {
                    "type": "string",
                    "pattern": "^(https?://|/|\\./).+"
                  },
                  "genre": {
                    "type": "string"
                  },
                  "bpm": {
                    "type": "number",
                    "minimum": 20,
                    "maximum": 300
                  },
                  "key": {
                    "type": "string",
                    "pattern": "^[A-G][b#]?(?:m|M)?$"
                  },
                  "note": {
                    "type": "string"
                  }
                },
                "anyOf": [
                  {
                    "required": [
                      "path"
                    ]
                  },
                  {
                    "required": [
                      "bpm"
                    ]
                  },
                  {
                    "required": [
                      "key"
                    ]
                  },
                  {
                    "required": [
                      "note"
                    ]
                  }
                ],
                "additionalProperties": false
              },
              "default": []
            },
            "soundFx": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "path": {
                    "type": "string",
                    "pattern": "^(https?://|/|\\./).+"
                  },
                  "note": {
                    "type": "string"
                  }
                },
                "anyOf": [
                  {
                    "required": [
                      "path"
                    ]
                  },
                  {
                    "required": [
                      "note"
                    ]
                  }
                ],
                "additionalProperties": false
              },
              "default": []
            }
          },
          "additionalProperties": false
        }
      },
      "required": [
        "audio"
      ],
      "additionalProperties": true
    },
    "slices_crew_slice": {
      "title": "Crew slice",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "role": {
            "$ref": "#/definitions/enum_role"
          },
          "customRole": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "contacts": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "availability": {
            "type": "string"
          },
          "note": {
            "type": "string"
          }
        },
        "required": [
          "role"
        ],
        "additionalProperties": false,
        "allOf": [
          {
            "if": {
              "properties": {
                "role": {
                  "const": "other"
                }
              }
            },
            "then": {
              "required": [
                "customRole"
              ]
            }
          }
        ]
      },
      "default": []
    },
    "slices_description_slice": {
      "title": "Narrative description slice",
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "One-paragraph narrative of what the viewer sees/hears. Markdown allowed."
        }
      },
      "required": [
        "description"
      ],
      "additionalProperties": true
    },
    "slices_id_slice": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "string",
          "pattern": "^[a-zA-Z0-9][a-zA-Z0-9._-]*$",
          "description": "Shot ID can be alphanumeric with dots, underscores, and hyphens, but must start with alphanumeric"
        },
        "schemaVersion": {
          "type": "string",
          "pattern": "^1\\.0\\.0$",
          "default": "1.0.0"
        },
        "scene": {
          "type": "integer",
          "minimum": 1
        },
        "shoot": {
          "type": [
            "integer",
            "string"
          ],
          "description": "Whole number, optionally one lowercase letter for inserts (e.g. 3a)."
        },
        "index": {
          "type": "integer",
          "minimum": 0
        }
      },
      "additionalProperties": true
    },
    "slices_meta_scene_slice": {
      "title": "Scene metadata slice",
      "type": "object",
      "properties": {
        "index": {
          "type": "integer",
          "minimum": 0
        },
        "scene": {
          "type": "integer",
          "minimum": 1
        },
        "shoot": {
          "type": "integer",
          "minimum": 0
        },
        "sceneName": {
          "type": "string"
        },
        "shootName": {
          "type": "string"
        }
      },
      "additionalProperties": true
    },
    "slices_note_slice": {
      "title": "Quick note slice",
      "type": "object",
      "properties": {
        "action": {
          "type": "string"
        },
        "userNote": {
          "type": "string"
        }
      },
      "additionalProperties": true
    },
    "slices_screen_slice": {
      "title": "Screen zone & motion slice",
      "type": "object",
      "properties": {
        "screen": {
          "type": "object",
          "properties": {
            "screenZone": {
              "$ref": "#/definitions/enum_screenzone",
              "description": "Defines the screen zone where the content will be displayed"
            },
            "cameraMotion": {
              "type": "string",
              "description": "Camera motion description during the scene"
            },
            "transitionIn": {
              "type": "string",
              "description": "Transition effects to be applied when entering the scene"
            },
            "action": {
              "type": "string",
              "description": "Specifies the action or interaction to be performed in this scene"
            },
            "transitionOut": {
              "type": "string",
              "description": "Transition effects to be applied when exiting the scene"
            },
            "immersiveCue": {
              "type": "string",
              "description": "Audio or visual cue to enhance the immersive experience"
            }
          },
          "additionalProperties": true
        }
      },
      "required": [
        "screen"
      ],
      "additionalProperties": true
    },
    "slices_software_slice": {
      "title": "Software slice",
      "type": "object",
      "properties": {
        "softwarePipeline": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/enum_software"
          },
          "default": []
        }
      },
      "additionalProperties": true
    },
    "slices_tasks_slice": {
      "$schema": "http://json-schema.org/draft/2020-12/schema",
      "title": "Tasks array slice",
      "description": "Production tasks with hour tracking and lifecycle timestamps.",
      "type": "array",
      "items": {
        "type": "object",
        "required": [
          "id",
          "task",
          "dept",
          "prio",
          "assignedTo",
          "status",
          "hoursPlanned",
          "timestamps"
        ],
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique task identifier."
          },
          "task": {
            "type": "string",
            "description": "Human-readable summary of the work."
          },
          "dept": {
            "$ref": "#/definitions/enum_dept",
            "description": "High-level department (e.g., CG, FX, EDIT)."
          },
          "prio": {
            "type": "string",
            "enum": [
              "low",
              "med",
              "high"
            ],
            "description": "Priority."
          },
          "assignedTo": {
            "type": "string",
            "description": "Name or role responsible."
          },
          "status": {
            "type": "string",
            "enum": [
              "todo",
              "in_progress",
              "blocked",
              "done"
            ],
            "description": "Pipeline state."
          },
          "note": {
            "type": "string",
            "description": "Supplementary notes."
          },
          "hoursPlanned": {
            "type": "number",
            "minimum": 0,
            "description": "Estimated person-hours."
          },
          "hoursActual": {
            "type": "number",
            "minimum": 0,
            "description": "Logged person-hours."
          },
          "timestamps": {
            "type": "object",
            "description": "Lifecycle markers (ISO-8601 with timezone).",
            "required": [
              "created",
              "due"
            ],
            "additionalProperties": false,
            "properties": {
              "created": {
                "type": "string",
                "format": "date-time",
                "description": "Task created."
              },
              "started": {
                "type": "string",
                "format": "date-time",
                "description": "Work started."
              },
              "due": {
                "type": "string",
                "format": "date-time",
                "description": "Deadline."
              },
              "completed": {
                "type": "string",
                "format": "date-time",
                "description": "Work finished."
              },
              "updated": {
                "type": "string",
                "format": "date-time",
                "description": "Last field change."
              }
            }
          },
          "dependsOn": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Task IDs that must finish before this starts."
          },
          "parentId": {
            "type": "string",
            "description": "WBS roll-up ID."
          },
          "progress": {
            "type": "number",
            "minimum": 0,
            "maximum": 100,
            "default": 0,
            "description": "Percent complete; auto-calculated if omitted."
          },
          "baseline": {
            "type": "object",
            "additionalProperties": false,
            "required": [
              "start",
              "end"
            ],
            "properties": {
              "start": {
                "type": "string",
                "format": "date-time"
              },
              "end": {
                "type": "string",
                "format": "date-time"
              }
            },
            "description": "Original plan for slip tracking."
          },
          "milestone": {
            "type": "boolean",
            "default": false,
            "description": "True if duration = 0 (diamond)."
          }
        }
      },
      "default": []
    },
    "slices_tech_group_slice": {
      "title": "Top-level technique group (UI tokens)",
      "type": "object",
      "properties": {
        "techGroup": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "3D",
              "2D",
              "SIM",
              "GEN",
              "AI",
              "CAM"
            ]
          },
          "minItems": 1,
          "uniqueItems": true,
          "description": "High-level bucket for primaryTechnique"
        }
      },
      "additionalProperties": true
    },
    "slices_technique_slice": {
      "title": "Technique slice (nested)",
      "type": "object",
      "properties": {
        "technique": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/definitions/slices_tech_group_slice"
            }
          ],
          "properties": {
            "primaryTechnique": {
              "$ref": "#/definitions/enum_technique",
              "description": "The main visual technique for this shot."
            },
            "otherTechniques": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/enum_technique"
              },
              "description": "Additional techniques in this shot."
            },
            "note": {
              "type": "string",
              "description": "Additional context or notes about the technique."
            }
          },
          "required": [
            "primaryTechnique"
          ],
          "additionalProperties": true
        }
      },
      "required": [
        "technique"
      ],
      "additionalProperties": true
    },
    "slices_timing_frames_slice": {
      "title": "Timing slice – frames",
      "type": "object",
      "properties": {
        "timing": {
          "type": "object",
          "properties": {
            "durationFrames": {
              "type": "integer",
              "minimum": 1
            },
            "fps": {
              "type": "number",
              "minimum": 1,
              "default": 30
            }
          },
          "required": [
            "durationFrames"
          ],
          "allOf": [
            {
              "if": {
                "required": [
                  "durationFrames"
                ]
              },
              "then": {
                "properties": {
                  "durationFrames": {
                    "minimum": 1
                  }
                }
              }
            }
          ]
        }
      },
      "additionalProperties": true
    },
    "slices_timing_seconds_slice": {
      "title": "Timing slice – seconds",
      "type": "object",
      "properties": {
        "timing": {
          "type": "object",
          "properties": {
            "durationSec": {
              "type": "number",
              "minimum": 0.01
            }
          },
          "required": [
            "durationSec"
          ]
        }
      },
      "additionalProperties": true
    },
    "slices_timing_slice": {
      "title": "Timing slice",
      "type": "object",
      "description": "Base timing schema that can be extended by timing.sec and timing.frames",
      "properties": {
        "timing": {
          "type": "object",
          "description": "Timing information for the shot"
        }
      },
      "additionalProperties": true
    },
    "slices_voice_slice": {
      "title": "Voice slice",
      "type": "object",
      "required": [
        "voice"
      ],
      "properties": {
        "voice": {
          "type": "object",
          "required": [
            "lang",
            "text"
          ],
          "additionalProperties": false,
          "properties": {
            "lang": {
              "type": "string",
              "pattern": "^[a-z]{2}$",
              "description": "ISO-639-1 language code"
            },
            "text": {
              "type": "string",
              "description": "Narration line for this shot"
            }
          }
        },
        "voiceLinesNotes": {
          "type": "string",
          "description": "note about the voice lines"
        }
      },
      "additionalProperties": true
    },
    "taxonomy_riskflag": {
      "title": "Risk flag taxonomy (UI helper)",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Technical": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "render_overrun",
              "software_failure",
              "infrastructure_issue",
              "realtime_sync"
            ]
          },
          "minItems": 1
        },
        "Production": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "asset_block",
              "schedule_scope",
              "creative_alignment",
              "talent_gap"
            ]
          },
          "minItems": 1
        },
        "Compliance": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "compliance_delay",
              "data_breach"
            ]
          },
          "minItems": 1
        }
      }
    },
    "taxonomy_role": {
      "title": "Role taxonomy (UI helper)",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Direction & Production": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Director",
              "Producer",
              "ProjectManager"
            ]
          },
          "minItems": 1
        },
        "Art & Supervision": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "ArtLead",
              "CGSupervisor"
            ]
          },
          "minItems": 1
        },
        "Realtime & FX": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "HoudiniArtist",
              "MotionDesigner",
              "UnrealArtist",
              "TouchDesignerArtist",
              "TouchDesignerDeveloper",
              "NotchArtist",
              "AIArtist"
            ]
          },
          "minItems": 1
        },
        "Audio": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "AudioLead",
              "Composer"
            ]
          },
          "minItems": 1
        },
        "Post Production": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "PostLead",
              "MontageArtist"
            ]
          },
          "minItems": 1
        },
        "Support": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "CameraOperator",
              "TechSupport"
            ]
          },
          "minItems": 1
        },
        "Other": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "other"
            ]
          },
          "minItems": 1
        }
      }
    },
    "taxonomy_screenzone": {
      "title": "Screen zone taxonomy (UI helper)",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Vertical": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "zenith",
              "upper",
              "horizon",
              "lower",
              "nadir"
            ]
          },
          "minItems": 1
        },
        "Cardinal": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "front",
              "rear",
              "left",
              "right"
            ]
          },
          "minItems": 1
        },
        "Quadrants-Upper": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "upper_front_left",
              "upper_front_right",
              "upper_rear_left",
              "upper_rear_right"
            ]
          },
          "minItems": 1
        },
        "Quadrants-Lower": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "lower_front_left",
              "lower_front_right",
              "lower_rear_left",
              "lower_rear_right"
            ]
          },
          "minItems": 1
        },
        "Full": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "full_dome"
            ]
          },
          "minItems": 1
        }
      }
    },
    "taxonomy_software": {
      "title": "Software taxonomy (UI helper)",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "3-D DCC": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Houdini",
              "Blender",
              "Cinema4D"
            ]
          },
          "minItems": 1
        },
        "Engines / Realtime": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Unreal",
              "Notch",
              "TouchDesigner"
            ]
          },
          "minItems": 1
        },
        "Compositing": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "AfterEffects"
            ]
          },
          "minItems": 1
        },
        "Renderers": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Redshift",
              "Octane"
            ]
          },
          "minItems": 1
        },
        "AI / Gen": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Midjourney",
              "RunwayGen2",
              "Veo",
              "ElevenLabs"
            ]
          },
          "minItems": 1
        },
        "Audio DAW": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Ableton",
              "VCV"
            ]
          },
          "minItems": 1
        },
        "Pipeline / Tracking": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "git"
            ]
          },
          "minItems": 1
        },
        "Other": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "other"
            ]
          },
          "minItems": 1
        }
      }
    },
    "taxonomy_technique": {
      "title": "Technique taxonomy (UI helper)",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "3D Rendering & Realtime": {
          "type": "array",
          "items": {
            "enum": [
              "3d_render",
              "3d_realtime"
            ]
          }
        },
        "Capture & Scanning": {
          "type": "array",
          "items": {
            "enum": [
              "capture_video",
              "capture_volumetric",
              "capture_photogrammetry",
              "capture_360",
              "capture_stock"
            ]
          }
        },
        "Character Animation": {
          "type": "array",
          "items": {
            "enum": [
              "rig_animation",
              "mocap_performance"
            ]
          }
        },
        "2D / Motion-Graphics": {
          "type": "array",
          "items": {
            "enum": [
              "2d_montage",
              "2d_multiscreen",
              "2d_video_collage",
              "2d_hand_drawn",
              "2d_shape_animation",
              "2d_info_graphics",
              "2d_typography"
            ]
          }
        },
        "Generative & Procedural": {
          "type": "array",
          "items": {
            "enum": [
              "gen_procedural",
              "gen_particle",
              "gen_data_viz",
              "gen_audio_reactive",
              "gen_generative_art"
            ]
          }
        },
        "Simulation (Physics)": {
          "type": "array",
          "items": {
            "enum": [
              "sim_fluid",
              "sim_smoke_fire",
              "sim_cloth_softbody"
            ]
          }
        },
        "AI / ML": {
          "type": "array",
          "items": {
            "enum": [
              "ai_generate",
              "ai_style_transfer",
              "ai_avatar",
              "ai_face_swap"
            ]
          }
        }
      }
    }
  },
  "properties": {
    "assign": {
      "$ref": "#/definitions/project_assign"
    },
    "draft": {
      "$ref": "#/definitions/project_draft"
    },
    "lock": {
      "$ref": "#/definitions/project_lock"
    },
    "plan": {
      "$ref": "#/definitions/project_plan"
    },
    "review": {
      "$ref": "#/definitions/project_review"
    }
  },
  "oneOf": [
    {
      "$ref": "#/definitions/project_assign"
    },
    {
      "$ref": "#/definitions/project_draft"
    },
    {
      "$ref": "#/definitions/project_lock"
    },
    {
      "$ref": "#/definitions/project_plan"
    },
    {
      "$ref": "#/definitions/project_review"
    }
  ]
}